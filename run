#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright 2015-2017 Hyeon Kim
#
# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
# option. This file may not be copied, modified, or distributed
# except according to those terms.

require 'yaml'
require 'json'
require 'cinch'
require 'daumdic'

def load_config_from_file(default, filename)
  begin
    data = YAML.load_file(filename)
  rescue Errno::ENOENT, Psych::SyntaxError
    return default
  end
  return default if data.class != Hash

  server   = data['server'  ]
  port     = data['port'    ]
  channels = data['channels']&.uniq

  config = {}
  config[:server  ] = server   || default[:server  ]
  config[:port    ] = port     || default[:port    ]
  config[:channels] = channels || default[:channels]
  return config
end

def load_config_from_env(default)
  server = ENV['HYEONBOT_SERVER']
  port   = ENV['HYEONBOT_PORT'  ]&.to_i

  config = {}
  config[:server  ] = server   || default[:server  ]
  config[:port    ] = port     || default[:port    ]
  config[:channels] = default[:channels]

  return config
end

#
# Load configs
#
config = {
  # Default configs
  server: 'irc.ozinger.org',
  port: 6697,
  channels: [],
}

config = load_config_from_file(config, '/etc/hyeonbot/config.yaml')
config = load_config_from_file(config, 'config.yaml')
config = load_config_from_env(config)

#
# Connect to the network
#
bot = Cinch::Bot.new do
  configure do |c|
    c.nick = '김젼봇'
    c.realname = 'love'
    c.user = 'slavery'

    c.server = config[:server]
    c.port = config[:port]
    c.ssl.use = true

    c.channels = config[:channels]
    c.max_reconnect_delay = 60
  end

  on :message, /^[dD](?:ic)? (.+)$/ do |m, query|
    result = Daumdic.one_liner(query)
    result = 'ㅇㅅㅇ)a' if result.nil?

    m.reply result
  end

  on :message, 'ㅇㅅㅇ)b' do |m|
    m.reply 'd(ㅇㅅㅇ'
  end

  on :message, '>ㅅㅇ' do |m|
    m.reply 'ㅇㅅ<'
  end
end

bot.loggers.level = :warn
bot.start
