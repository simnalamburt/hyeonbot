#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright 2015-2019 Hyeon Kim
#
# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
# option. This file may not be copied, modified, or distributed
# except according to those terms.

require 'sqlite3'
require 'cinch'
require 'daumdic'

# Handle ^C gracefully
trap 'SIGINT' do
  print "\n\nBye!\n\n"
  exit
end

# Load configs from environment variables
CFG_SERVER = ENV['HYEONBOT_SERVER'] || 'irc.ozinger.org'
CFG_PORT = ENV['HYEONBOT_PORT']&.to_i || 6697
CFG_LOG_LEVEL = ENV['HYEONBOT_LOG_LEVEL']&.to_sym || :debug

# Connect to DB
db = SQLite3::Database.new 'db'
db.execute <<-'SQL'
CREATE TABLE IF NOT EXISTS channels (
  name TEXT PRIMARY KEY
);
SQL

#
# IRC bot definition
#
bot = Cinch::Bot.new do |b|
  configure do |c|
    c.nick = '김젼봇'
    c.realname = 'IRC bot. See https://github.com/simnalamburt/hyeonbot for the reference.'
    c.user = 'hyeonbot'

    c.server = CFG_SERVER
    c.port = CFG_PORT
    c.ssl.use = true
    c.max_reconnect_delay = 60

    c.channels = db.execute('SELECT * FROM channels').flatten
  end

  # Daum dictionary
  on :message, /^[dD](?:ic)? (.+)$/ do |m, query|
    result = Daumdic.one_liner(query.strip.downcase)
    result = 'ㅇㅅㅇ)a' if result.nil?

    m.reply result
  end

  # Health check
  on :message, 'ㅇㅅㅇ)b' do |m|
    m.reply 'd(ㅇㅅㅇ'
  end
  on :message, '>ㅅㅇ' do |m|
    m.reply 'ㅇㅅ<'
  end

  # 올바른 언어생활
  on :message, /우리나라/ do |m|
    m.reply '우리나라 → 한국'
  end
  on :message, /한글화/ do |m|
    m.reply '한글화 → 한국어 번역 ' + Cinch::Formatting.format(:grey, 'https://t.co/ztyockmyrj')
  end
  on :message, /쉐이더/ do |m|
    m.reply '쉐이더 → 셰이더 ' + Cinch::Formatting.format(:grey, '쉘 → 셸, 쉐어 → 셰어 https://korean.go.kr/front/onlineQna/onlineQnaView.do?qna_seq=120529')
  end
  on :message, /쉐이크/ do |m|
    m.reply '쉐이크 → 셰이크 ' + Cinch::Formatting.format(:grey, '쉘 → 셸, 쉐어 → 셰어 https://korean.go.kr/front/onlineQna/onlineQnaView.do?qna_seq=120529')
  end
  on :message, /쉘/ do |m|
    m.reply '쉘 → 셸 ' + Cinch::Formatting.format(:grey, '쉐이크 → 셰이크, 쉐어 → 셰어 https://korean.go.kr/front/onlineQna/onlineQnaView.do?qna_seq=120529')
  end
  on :message, /쉐어/ do |m|
    m.reply '쉐어 → 셰어 ' + Cinch::Formatting.format(:grey, '쉐이크 → 셰이크, 쉘 → 셸 https://korean.go.kr/front/onlineQna/onlineQnaView.do?qna_seq=120529')
  end
  on :message, /됬/ do |m|
    m.reply '됬 → 됐 ' + Cinch::Formatting.format(:grey, 'https://korean.go.kr/front/onlineQna/onlineQnaView.do?qna_seq=151151')
  end
  on :message, /메세지/ do |m|
    m.reply '메세지 → 메시지 ' + Cinch::Formatting.format(:grey, 'https://korean.go.kr/front/mcfaq/mcfaqView.do?mcfaq_seq=5548')
  end

  # React on invitation
  on :invite do |m|
    # Join the channel
    b.join m.channel

    # Update DB
    begin
      db.execute('INSERT INTO channels VALUES (?)', m.target.name)
      b.loggers.info "Hyeonbot has been invited to #{m.target.name}"
    rescue SQLite3::ConstraintException
      b.loggers.warn 'Hyeonbot has been invited to the already joined channel.'
    end
  end

  on :kick do |m|
    # Check if kicked user was hyeonbot or someone else
    if m.params[1] != m.bot.nick
      return
    end

    # Hyeonbot has been kicked, update DB
    db.execute('DELETE FROM channels WHERE name = ?', m.target.name)
    b.loggers.info "Hyeonbot has been kicked from #{m.target.name}"
  end
end

bot.loggers.level = CFG_LOG_LEVEL

#
# Connect to the network
#
bot.start
